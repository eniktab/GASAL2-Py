name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

# Avoid duplicate publishes if a tag is quickly re-pushed
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write   # for GitHub Release (last step)
  id-token: write   # PyPI Trusted Publishing (no API token needed)

jobs:
  build-and-publish:
    name: Build & Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ensure full history if your build needs it

      - name: Extract version from tag
        id: ver
        run: |
          # refs/tags/v1.2.3 -> v1.2.3 and 1.2.3
          tag="${GITHUB_REF_NAME}"
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
          echo "version=${tag#v}" >> "$GITHUB_OUTPUT"

      - name: Sanity check tag is SemVer vX.Y.Z
        run: |
          if ! echo "${GITHUB_REF_NAME}" | grep -Eq '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Tag ${GITHUB_REF_NAME} is not SemVer-like (vX.Y.Z)"; exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tooling
        run: |
          python -m pip install -U pip
          python -m pip install -U build twine

      # Optional: compare pyproject version with tag (non-fatal if using dynamic versioning)
      - name: (Optional) Check version matches tag
        continue-on-error: true
        run: |
          python - <<'PY'
          import sys, pathlib
          p = pathlib.Path("pyproject.toml")
          if not p.exists():
              print("No pyproject.toml; skipping check"); sys.exit(0)
          try:
              import tomllib
          except Exception:
              print("No tomllib (Python<3.11?)â€”skipping check"); sys.exit(0)
          data = tomllib.loads(p.read_text(encoding="utf-8"))
          proj = (data.get("project") or {})
          version = proj.get("version")
          if version:
              import os
              tag_ver = os.environ["TAG_VER"]
              if version != tag_ver:
                  print(f"WARNING: pyproject.toml version ({version}) != tag ({tag_ver})")
          else:
              print("No static project.version (probably dynamic); skipping check")
          PY
        env:
          TAG_VER: ${{ steps.ver.outputs.version }}

      - name: Build sdist & wheel
        env:
          # If your build backend reads version from env/tag, expose it here if needed:
          PROJECT_VERSION: ${{ steps.ver.outputs.version }}
        run: |
          rm -rf dist
          python -m build --sdist --wheel --outdir dist
          ls -l dist

      - name: Validate metadata
        run: |
          python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.ver.outputs.tag }}
          path: dist/*

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          packages-dir: dist
          skip-existing: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: Release ${{ steps.ver.outputs.tag }}
          files: dist/*
          generate_release_notes: true

