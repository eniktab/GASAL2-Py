name: Build & Release Wheels (CUDA manylinux)

on:
  push:
    branches: [ main ]
    paths:
      - "pyproject.toml"
      - "src/**"
      - "CMakeLists.txt"
      - "cmake/**"
      - ".github/workflows/wheels.yml"
  workflow_dispatch: {}

permissions:
  contents: write

env:
  PACKAGE_NAME: gasal2_py
  PYTHON_BUILD_VERS: "cp39 cp310 cp311 cp312"

jobs:
  version-check:
    name: Detect version change
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vout.outputs.version }}
      prev_version: ${{ steps.vout.outputs.prev_version }}
      changed: ${{ steps.vout.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Read current version from pyproject.toml
        id: vout
        run: |
          python - <<'PY'
          import subprocess, tomllib, pathlib, os
          cur = tomllib.loads(pathlib.Path("pyproject.toml").read_bytes()).get("project",{}).get("version","")
          try:
              prev_bytes = subprocess.check_output(["git","show","HEAD^:pyproject.toml"])
              prev = tomllib.loads(prev_bytes).get("project",{}).get("version","")
          except Exception:
              prev = ""
          changed = "true" if (cur and cur != prev) else "false"
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"version={cur}\n")
              fh.write(f"prev_version={prev}\n")
              fh.write(f"changed={changed}\n")
          PY

  build-linux:
    name: Build manylinux wheels (CUDA)
    runs-on: ubuntu-latest
    needs: version-check
    strategy:
      fail-fast: false
      matrix:
        ml_image:
          - kind: manylinux2014
            tag: "gasal2-manylinux2014-cuda:12.4.0"          # <- literals (no env here)
            base: "quay.io/pypa/manylinux2014_x86_64"
            cuda_from: "nvidia/cuda:12.4.0-devel-centos7"
          - kind: manylinux_2_28
            tag: "gasal2-manylinux_2_28-cuda:12.4.1"        # <- literals (no env here)
            base: "quay.io/pypa/manylinux_2_28_x86_64"
            cuda_from: "nvidia/cuda:12.4.1-devel-rockylinux8"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for helper tooling
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build custom CUDA-enabled manylinux image (${{ matrix.ml_image.kind }})
        run: |
          cat > Dockerfile.ci <<'DOCKER'
          ARG BASE
          ARG CUDA_FROM
          FROM ${CUDA_FROM} as cuda

          FROM ${BASE}
          RUN yum -y install git && yum clean all || true \
           || (microdnf -y install git && microdnf clean all || true) \
           || (dnf -y install git && dnf clean all || true)
          COPY --from=cuda /usr/local/cuda /opt/cuda
          ENV PATH="/opt/cuda/bin:${PATH}" CUDA_HOME="/opt/cuda"
          DOCKER
          docker build \
            --build-arg BASE=${{ matrix.ml_image.base }} \
            --build-arg CUDA_FROM=${{ matrix.ml_image.cuda_from }} \
            -t ${{ matrix.ml_image.tag }} \
            -f Dockerfile.ci .

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install "cibuildwheel>=2.20" build

      - name: Build wheels with cibuildwheel on ${{ matrix.ml_image.kind }}
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.ml_image.tag }}
          CIBW_BUILD: ${{ env.PYTHON_BUILD_VERS }}-manylinux_x86_64
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_BEFORE_BUILD: "python -m pip install -U pip cmake>=3.27 ninja>=1.11"
          CIBW_ENVIRONMENT: >
            CMAKE_ARGS="-DGASAL2_CUDA_HOME=/opt/cuda"
          CIBW_BUILD_VERBOSITY: "1"
          # If your auditwheel is new enough to support --exclude; if not, drop it.
          CIBW_REPAIR_WHEEL_COMMAND: >
            auditwheel -v repair {wheel} -w {dest_dir} --exclude libcuda.so.1
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Build sdist
        run: |
          python -m build --sdist --outdir dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels-${{ matrix.ml_image.kind }}
          path: |
            wheelhouse/*.whl
            dist/*.tar.gz

  release:
    name: Create GitHub Release if version changed
    runs-on: ubuntu-latest
    needs: [version-check, build-linux]
    if: needs.version-check.outputs.changed == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Flatten artifacts for release/publish
        run: |
          mkdir -p to-release
          find artifacts -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} to-release/ \;
          ls -l to-release

      - name: Create tag
        run: |
          git fetch --tags || true
          if git rev-parse "v${{ needs.version-check.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists; skipping"; exit 0
          fi
          git tag "v${{ needs.version-check.outputs.version }}"
          git push origin "v${{ needs.version-check.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          name: GASAL2-Py v${{ needs.version-check.outputs.version }}
          body: |
            CUDA-enabled manylinux wheels (2014 & 2_28).
            Built from commit ${{ github.sha }}.
          files: to-release/*

  publish-pypi:
    name: Publish to PyPI (optional)
    runs-on: ubuntu-latest
    needs: release
    if: |
      needs.version-check.outputs.changed == 'true' &&
      secrets.PYPI_API_TOKEN != ''
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Collect distributions
        run: |
          mkdir -p to-publish
          find artifacts -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} to-publish/ \;

      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: to-publish
          skip_existing: true

