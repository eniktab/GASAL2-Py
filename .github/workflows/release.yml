name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write  # for Trusted Publishing to PyPI

jobs:
  publish:
    name: Build & Publish (tagged)
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build distributions
        run: |
          rm -rf dist
          python -m build --sdist --wheel --outdir dist
          ls -l dist

      - name: Ensure artifacts exist
        run: |
          ls -l dist
          test -n "$(ls -A dist/*.whl 2>/dev/null)" || (echo "No wheels found!" && exit 1)
          test -n "$(ls -A dist/*.tar.gz 2>/dev/null)" || echo "NOTE: sdist missing; ensure wheels job builds it."

      - name: Determine version from tag (sanity)
        id: ver
        run: |
          # tag like v1.2.3 -> 1.2.3
          version="${GITHUB_REF_NAME#v}"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

      - name: Check if version exists on PyPI
        id: pypi_exists
        run: |
          set -e
          pkg="${{ github.event.repository.name }}"
          ver="${{ steps.ver.outputs.version }}"
          echo "Checking PyPI for $pkg==$ver"
          code=$(curl -s -o /tmp/pypi.json -w "%{http_code}" "https://pypi.org/pypi/${pkg}/json" || true)
          if [ "$code" != "200" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          python - <<'PY'
            import json, os, sys
            data = json.load(open("/tmp/pypi.json"))
            ver = os.environ["VER"]
            print("Known releases:", ", ".join(data.get("releases", {}).keys()))
            print("Looking for", ver)
            print("exists=", ver in data.get("releases", {}))
            open(os.environ["GITHUB_OUTPUT"], "a").write(f"exists={'true' if ver in data.get('releases', {}) else 'false'}\n")
          PY
        env:
          VER: ${{ steps.ver.outputs.version }}

      - name: Verify build completeness
        run: |
          echo "Artifacts:"
          ls -l dist
          # Gate publish on having at least one wheel
          test -n "$(ls -A dist/*.whl 2>/dev/null)" || (echo "No wheels; aborting publish." && exit 1)

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          # Guard against accidental re-uploads
          skip-existing: true

