name: Build & Release Wheels (CUDA manylinux)

on:
  push:
    branches: [ main ]
    paths:
      - "pyproject.toml"
      - "src/**"
      - "CMakeLists.txt"
      - "cmake/**"
      - ".github/workflows/wheels.yml"
  workflow_dispatch: {}

permissions:
  contents: write    # create tags/releases
  actions: read

env:
  PACKAGE_NAME: gasal2_py
  # Adjust CUDA versions if you update images below.
  CUDA_ML2014_IMAGE: "gasal2-manylinux2014-cuda:12.4.0"
  CUDA_ML228_IMAGE:  "gasal2-manylinux_2_28-cuda:12.4.1"
  PYTHON_BUILD_VERS: "cp39 cp310 cp311 cp312"

jobs:
  version-check:
    name: Detect version change
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vout.outputs.version }}
      prev_version: ${{ steps.vout.outputs.prev_version }}
      changed: ${{ steps.vout.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Read current version from pyproject.toml
        id: vout
        run: |
          python - <<'PY'
          import sys, subprocess, tomllib, pathlib
          pj = pathlib.Path("pyproject.toml").read_bytes()
          cur = tomllib.loads(pj).get("project", {}).get("version", "")
          try:
              prev_bytes = subprocess.check_output(["git","show","HEAD^:pyproject.toml"])
              prev = tomllib.loads(prev_bytes).get("project",{}).get("version","")
          except Exception:
              prev = ""
          changed = "true" if (cur and cur != prev) else "false"
          print(f"cur={cur} prev={prev} changed={changed}")
          # set outputs
          print(f"::set-output name=version::{cur}")
          print(f"::set-output name=prev_version::{prev}")
          print(f"::set-output name=changed::{changed}")
          PY

  build-linux:
    name: Build manylinux wheels (CUDA)
    runs-on: ubuntu-latest
    needs: version-check
    strategy:
      fail-fast: false
      matrix:
        ml_image:
          - kind: manylinux2014
            tag: ${{ env.CUDA_ML2014_IMAGE }}
            base: quay.io/pypa/manylinux2014_x86_64
            cuda_from: "nvidia/cuda:12.4.0-devel-centos7"
          - kind: manylinux_2_28
            tag: ${{ env.CUDA_ML228_IMAGE }}
            base: quay.io/pypa/manylinux_2_28_x86_64
            cuda_from: "nvidia/cuda:12.4.1-devel-rockylinux8"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for helper tooling
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build custom CUDA-enabled manylinux image (${{ matrix.ml_image.kind }})
        run: |
          cat > Dockerfile.ci <<'DOCKER'
          ARG BASE
          ARG CUDA_FROM
          FROM ${CUDA_FROM} as cuda
          # cuda stage just provides /usr/local/cuda

          FROM ${BASE}
          # Minimal build deps for auditwheel/cmake/ninja inside cibuildwheel runner
          RUN yum -y install git && yum clean all || true \
           || (microdnf -y install git && microdnf clean all || true) \
           || (dnf -y install git && dnf clean all || true)
          # copy CUDA into /opt/cuda ; don't modify ldconfig here (auditwheel will handle RPATHs)
          COPY --from=cuda /usr/local/cuda /opt/cuda
          ENV PATH="/opt/cuda/bin:${PATH}" \
              CUDA_HOME="/opt/cuda"
          DOCKER
          docker build \
            --build-arg BASE=${{ matrix.ml_image.base }} \
            --build-arg CUDA_FROM=${{ matrix.ml_image.cuda_from }} \
            -t ${{ matrix.ml_image.tag }} \
            -f Dockerfile.ci .

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install "cibuildwheel>=2.20" build

      - name: Build wheels with cibuildwheel on ${{ matrix.ml_image.kind }}
        env:
          # Tell cibuildwheel to use our custom image
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.ml_image.tag }}
          # Limit to CPythons we want
          CIBW_BUILD: ${{ env.PYTHON_BUILD_VERS }}-manylinux_x86_64
          # Avoid musllinux for CUDA (Jetson/ARM not targeted here)
          CIBW_SKIP: "pp* *-musllinux_*"
          # Ensure build tools avail inside containers
          CIBW_BEFORE_BUILD: "python -m pip install -U pip cmake>=3.27 ninja>=1.11"
          # Pass CUDA location to your CMake via your documented knob
          CIBW_ENVIRONMENT: >
            CMAKE_ARGS="-DGASAL2_CUDA_HOME=/opt/cuda"
          # Be chatty enough to debug
          CIBW_BUILD_VERBOSITY: "1"
          # Repair produced wheels; exclude libcuda.so.1 (provided by driver)
          CIBW_REPAIR_WHEEL_COMMAND: >
            auditwheel -v repair {wheel} -w {dest_dir} --exclude libcuda.so.1
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Build sdist (source tarball)
        run: |
          python -m build --sdist --outdir dist
          ls -l dist/ wheelhouse/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels-${{ matrix.ml_image.kind }}
          path: |
            wheelhouse/*.whl
            dist/*.tar.gz

  release:
    name: Create GitHub Release if version changed
    runs-on: ubuntu-latest
    needs: [version-check, build-linux]
    if: needs.version-check.outputs.changed == 'true'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        id: rn
        run: |
          echo "GASAL2-Py v${{ needs.version-check.outputs.version }}" > RELEASE_NOTES.txt
          echo "" >> RELEASE_NOTES.txt
          echo "• CUDA-enabled manylinux wheels (2014 & 2_28)" >> RELEASE_NOTES.txt
          echo "• Built from commit ${GITHUB_SHA}" >> RELEASE_NOTES.txt

      - name: Create tag
        run: |
          git tag "v${{ needs.version-check.outputs.version }}"
          git push origin "v${{ needs.version-check.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-check.outputs.version }}
          name: GASAL2-Py v${{ needs.version-check.outputs.version }}
          body_path: RELEASE_NOTES.txt
          files: |
            artifacts/**/**/*.whl
            artifacts/**/**/*.tar.gz

  publish-pypi:
    name: Publish to PyPI (optional)
    runs-on: ubuntu-latest
    needs: release
    if: |
      needs.version-check.outputs.changed == 'true' &&
      secrets.PYPI_API_TOKEN != ''
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: artifacts
          skip_existing: true

