name: Build & Release Wheels (CUDA matrix, manylinux/macos/windows)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  PACKAGE_NAME: your_package_name
  CIBW_BUILD_VERBOSITY: 1
  CIBW_TEST_COMMAND: "python -c \"import your_package_name as m; print(m.__version__)\""
  CIBW_SKIP: "cp36-* pp*"
  CIBW_PRERELEASE_PYTHONS: "False"

jobs:
  version-check:
    name: Extract version from tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.getver.outputs.version }}
    steps:
      - name: Get version
        id: getver
        run: |
          # Expect tags like v1.2.3
          if [[ "${GITHUB_REF_NAME}" =~ ^v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "Tag ${GITHUB_REF_NAME} is not semver-like (vX.Y.Z)"; exit 1
          fi
      - name: Show version
        run: echo "Version is ${{ steps.getver.outputs.version }}"

  linux-wheels:
    name: Linux wheels (manylinux)
    needs: version-check
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for cibuildwheel
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ENVIRONMENT: |
            PACKAGE_VERSION=${{ needs.version-check.outputs.version }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        with:
          output-dir: wheelhouse

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: linux-wheels
          path: wheelhouse/*.whl

  macos-wheels:
    name: macOS wheels (x86_64 + arm64)
    needs: version-check
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        arch: ["x86_64", "arm64"]
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for cibuildwheel
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_ENVIRONMENT: |
            PACKAGE_VERSION=${{ needs.version-check.outputs.version }}
        with:
          output-dir: wheelhouse

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-wheels
          path: wheelhouse/*.whl

  windows-wheels:
    name: Windows wheels
    needs: version-check
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python for cibuildwheel
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ENVIRONMENT: |
            PACKAGE_VERSION=${{ needs.version-check.outputs.version }}
        with:
          output-dir: wheelhouse

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: windows-wheels
          path: wheelhouse/*.whl

  sdist:
    name: Source distribution
    needs: version-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build sdist
        run: |
          python -m pip install --upgrade build
          python -m build --sdist --outdir dist
      - name: Upload sdist (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  collect:
    name: Collect all artifacts
    needs: [linux-wheels, macos-wheels, windows-wheels, sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: to-publish

      - name: Flatten artifact tree
        run: |
          shopt -s globstar nullglob
          mkdir -p to-publish-flat
          mv to-publish/**/*.{whl,tar.gz} to-publish-flat/ || true
          rmdir -p to-publish 2>/dev/null || true
          mv to-publish-flat to-publish
          ls -l to-publish

      - name: Twine check
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine check to-publish/*

      # NEW: Skip if the version already exists on PyPI
      - name: Skip if version already on PyPI
        id: pypi_exists
        run: |
          set -e
          PKG="${{ env.PACKAGE_NAME }}"
          VER="${{ needs.version-check.outputs.version }}"
          echo "Checking PyPI for $PKG==$VER"
          code=$(curl -s -o /tmp/pypi.json -w "%{http_code}" "https://pypi.org/pypi/${PKG}/json" || true)
          if [ "$code" != "200" ]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          python - <<'PY'
            import json, os, sys
            data = json.load(open("/tmp/pypi.json"))
            ver = os.environ["VER"]
            exists = ver in data.get("releases", {})
            print("exists =", exists)
            open(os.environ["GITHUB_OUTPUT"], "a").write(f"exists={'true' if exists else 'false'}\n")
          PY
        env:
          VER: ${{ needs.version-check.outputs.version }}

      - name: Publish (if token present)
        if: ${{ steps.pypi_exists.outputs.exists != 'true' }}
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          password: ${{ env.PYPI_API_TOKEN }}
          packages_dir: to-publish
          skip_existing: true

      - name: Skip publish (already on PyPI or no token)
        if: ${{ steps.pypi_exists.outputs.exists == 'true' || env.PYPI_API_TOKEN == '' }}
        run: |
          echo "Skipping publish: version exists on PyPI or PYPI_API_TOKEN not set."

