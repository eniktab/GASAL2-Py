name: Build & Release Wheels (CUDA matrix, manylinux/macos/windows)

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"   # vX.Y.Z or vX.Y.Zrc1, etc.
  workflow_dispatch:

env:
  PACKAGE_NAME: gasal2
  CIBW_BUILD_VERBOSITY: "1"
  CIBW_SKIP: "cp36-* pp* *-win32 *-manylinux_i686"
  CIBW_PRERELEASE_PYTHONS: "False"
  CIBW_TEST_COMMAND: "python -c \"import gasal2 as m; print(getattr(m,'__version__','n/a'))\""

jobs:
  version-check:
    name: Extract version from tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.getver.outputs.version }}
      tag: ${{ steps.getver.outputs.tag }}
    steps:
      - name: Get version
        id: getver
        shell: bash
        run: |
          ref="${GITHUB_REF_NAME}"
          # Accept vX.Y.Z and pre-releases like vX.Y.Zrc1
          if [[ "$ref" =~ ^v([0-9]+\.[0-9]+\.[0-9]+[0-9A-Za-z\.-]*)$ ]]; then
            echo "version=${ref#v}" >> "$GITHUB_OUTPUT"
            echo "tag=${ref}" >> "$GITHUB_OUTPUT"
          else
            echo "Tag $ref is not semver-like (vX.Y.Z)"; exit 1
          fi
      - name: Show version
        run: |
          echo "Version: ${{ steps.getver.outputs.version }}"
          echo "Tag:      ${{ steps.getver.outputs.tag }}"

  linux-wheels:
    name: Linux wheels (manylinux)
    needs: version-check
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          PACKAGE_VERSION: ${{ needs.version-check.outputs.version }}
        with:
          output-dir: wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: linux-wheels
          path: wheelhouse/*.whl

  macos-wheels:
    name: macOS wheels (x86_64 + arm64)
    needs: version-check
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        arch: ["x86_64", "arm64"]
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD: ${{ matrix.python }}
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          PACKAGE_VERSION: ${{ needs.version-check.outputs.version }}
        with:
          output-dir: wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-wheels
          path: wheelhouse/*.whl

  windows-wheels:
    name: Windows wheels
    needs: version-check
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD: ${{ matrix.python }}
          PACKAGE_VERSION: ${{ needs.version-check.outputs.version }}
        with:
          output-dir: wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          name: windows-wheels
          path: wheelhouse/*.whl

  sdist:
    name: Source distribution
    needs: version-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build sdist
        run: |
          python -m pip install --upgrade build
          python -m build --sdist --outdir dist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  collect:
    name: Twine check & publish to PyPI
    needs: [linux-wheels, macos-wheels, windows-wheels, sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: to-publish

      - name: Flatten artifact tree
        shell: bash
        run: |
          shopt -s globstar nullglob
          mkdir -p to-publish-flat
          mv to-publish/**/*.{whl,tar.gz} to-publish-flat/ || true
          rm -rf to-publish
          mv to-publish-flat to-publish
          ls -l to-publish

      - name: Twine check
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine check to-publish/*

      - name: Check if version exists on PyPI
        id: pypi_exists
        shell: bash
        env:
          PKG: ${{ env.PACKAGE_NAME }}
          VER: ${{ needs.version-check.outputs.version }}
        run: |
          code=$(curl -s -o /tmp/pypi.json -w "%{http_code}" "https://pypi.org/pypi/${PKG}/json" || true)
          if [ "$code" != "200" ]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          python -c "import json,os;d=json.load(open('/tmp/pypi.json'));print('exists =',os.environ['VER'] in d.get('releases',{}));open(os.environ['GITHUB_OUTPUT'],'a').write('exists='+('true' if os.environ['VER'] in d.get('releases',{}) else 'false')+'\n')"

      - name: Publish to PyPI
        if: ${{ steps.pypi_exists.outputs.exists != 'true' && secrets.PYPI_API_TOKEN != '' }}
        uses: pypa/gh-action-pypi-publish@v1.12.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: to-publish
          skip_existing: true

      - name: Skip publish (already on PyPI or no token)
        if: ${{ steps.pypi_exists.outputs.exists == 'true' || secrets.PYPI_API_TOKEN == '' }}
        run: echo "Skipping publish."

